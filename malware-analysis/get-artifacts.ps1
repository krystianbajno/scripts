$SysinternalsSuiteStringsPath = "C:\Tools\SysinternalsSuite\strings.exe"

function Process-Files {
    param (
        [string]$DirectoryPath,
        [string]$OutputPath,
        [string]$SearchPattern,
        [string]$Description
    )

    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Processing file for $Description: $($_.FullName)"
        $results = & $SysinternalsSuiteStringsPath $_.FullName | Where-Object { $_ -match $SearchPattern }
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}

function Get-URLs {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "url_output.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern 'http[s]?://[a-zA-Z0-9\.-]+\.[a-zA-Z]{2,6}' -Description "URLs"
}

function Get-HexEncodedURLs {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "hex_encoded_urls.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '46[86]574(3a2f2f)?([0-9a-fA-F]{2})+' -Description "hex-encoded URLs"
}

function Get-Base64 {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "base64_encoded_urls.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '([A-Za-z0-9+/]{10,}={0,2})' -Description "Base64-encoded data"
}

function Get-DefangedURLs {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "defanged_urls.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '(hxxp|http|ftp)[s]?[:]//[^ ]*|\b[a-zA-Z0-9.-]+\[(dot)]\.[a-zA-Z]{2,6}' -Description "defanged URLs"
}

function Get-RegistryKeys {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "registry_keys.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern 'HKEY_[A-Z_]+\\[a-zA-Z0-9_\\]+' -Description "registry keys"
}

function Get-Domains {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "domains.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}\b' -Description "domain names"
}

function Get-Dates {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "dates.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '\b([0-9]{4}-[0-9]{2}-[0-9]{2}|[0-9]{2}/[0-9]{2}/[0-9]{4})\b' -Description "dates"
}

function Get-Hashes {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "hash_output.txt")

    Get-ChildItem -Path $DirectoryPath -Recurse -File | ForEach-Object {
        Write-Host "Processing file for hashes: $($_.FullName)"
        $hashMD5 = (Get-FileHash -Path $_.FullName -Algorithm MD5).Hash
        $hashSHA1 = (Get-FileHash -Path $_.FullName -Algorithm SHA1).Hash
        $hashSHA256 = (Get-FileHash -Path $_.FullName -Algorithm SHA256).Hash

        Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
        Add-Content -Path $OutputPath -Value "MD5: $hashMD5"
        Add-Content -Path $OutputPath -Value "SHA-1: $hashSHA1"
        Add-Content -Path $OutputPath -Value "SHA-256: $hashSHA256"
    }
}

function Get-IPv4 {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "ipv4_output.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' -Description "IPv4 addresses"
}

function Get-IPv6 {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "ipv6_output.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '([a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}' -Description "IPv6 addresses"
}

function Get-Emails {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "email_output.txt")
    Process-Files -DirectoryPath $DirectoryPath -OutputPath $OutputPath -SearchPattern '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}' -Description "email addresses"
}

function Get-MalapiCalls {
    param ([string]$DirectoryPath = "C:\Path\To\Files", [string]$OutputPath = "malapi_results.txt")
    
    $malapiCalls = @(
        'CreateToolhelp32Snapshot', 'EnumDeviceDrivers', 'EnumProcesses', 'EnumProcessModules', 'EnumProcessModulesEx',
        'FindFirstFileA', 'FindNextFileA', 'GetLogicalProcessorInformation', 'GetLogicalProcessorInformationEx',
        'GetModuleBaseNameA', 'GetSystemDefaultLangId', 'GetVersionExA', 'GetWindowsDirectoryA', 'IsWoW64Process',
        'Module32First', 'Module32Next', 'Process32First', 'Process32Next', 'ReadProcessMemory', 'Thread32First',
        'Thread32Next', 'GetSystemDirectoryA', 'GetSystemTime', 'ReadFile', 'GetComputerNameA', 'VirtualQueryEx',
        'GetProcessIdOfThread', 'GetProcessId', 'GetCurrentThread', 'GetCurrentThreadId', 'GetThreadId',
        'GetThreadInformation', 'GetCurrentProcess', 'GetCurrentProcessId', 'SearchPathA', 'GetFileTime',
        'GetFileAttributesA', 'LookupPrivilegeValueA', 'LookupAccountNameA', 'GetCurrentHwProfileA', 'GetUserNameA',
        'RegEnumKeyExA', 'RegEnumValueA', 'RegQueryInfoKeyA', 'RegQueryMultipleValuesA', 'RegQueryValueExA',
        'NtQueryDirectoryFile', 'NtQueryInformationProcess', 'NtQuerySystemEnvironmentValueEx', 'EnumDesktopWindows',
        'EnumWindows', 'NetShareEnum', 'NetShareGetInfo', 'NetShareCheck', 'GetAdaptersInfo', 'PathFileExistsA',
        'GetNativeSystemInfo', 'RtlGetVersion', 'GetIpNetTable', 'GetLogicalDrives', 'GetDriveTypeA', 'RegEnumKeyA',
        'WNetEnumResourceA', 'WNetCloseEnum', 'FindFirstUrlCacheEntryA', 'FindNextUrlCacheEntryA', 'WNetAddConnection2A',
        'WNetAddConnectionA', 'EnumResourceTypesA', 'EnumResourceTypesExA', 'GetSystemTimeAsFileTime', 'GetThreadLocale',
        'EnumSystemLocalesA', 'CreateFileMappingA', 'CreateProcessA', 'CreateRemoteThread', 'CreateRemoteThreadEx',
        'GetModuleHandleA', 'GetProcAddress', 'GetThreadContext', 'HeapCreate', 'LoadLibraryA', 'LoadLibraryExA',
        'LocalAlloc', 'MapViewOfFile', 'MapViewOfFile2', 'MapViewOfFile3', 'MapViewOfFileEx', 'OpenThread', 'QueueUserAPC',
        'ResumeThread', 'SetProcessDEPPolicy', 'SetThreadContext', 'SuspendThread', 'VirtualAlloc', 'VirtualAllocEx',
        'VirtualProtect', 'VirtualProtectEx', 'WriteProcessMemory', 'VirtualAllocExNuma', 'VirtualAlloc2',
        'VirtualAlloc2FromApp', 'VirtualAllocFromApp', 'VirtualProtectFromApp', 'CreateThread', 'WaitForSingleObject',
        'OpenProcess', 'OpenFileMappingA', 'GetProcessHeap', 'GetProcessHeaps', 'HeapAlloc', 'HeapReAlloc', 'GlobalAlloc',
        'AdjustTokenPrivileges', 'CreateProcessAsUserA', 'OpenProcessToken', 'CreateProcessWithTokenW',
        'NtAdjustPrivilegesToken', 'NtAllocateVirtualMemory', 'NtContinue', 'NtCreateProcess', 'NtCreateProcessEx',
        'NtCreateSection', 'NtCreateThread', 'NtCreateThreadEx', 'NtCreateUserProcess', 'NtDuplicateObject',
        'NtMapViewOfSection', 'NtOpenProcess', 'NtOpenThread', 'NtProtectVirtualMemory', 'NtQueueApcThread',
        'NtQueueApcThreadEx', 'NtQueueApcThreadEx2', 'NtReadVirtualMemory', 'NtResumeThread', 'NtUnmapViewOfSection',
        'NtWaitForMultipleObjects', 'NtWaitForSingleObject', 'NtWriteVirtualMemory', 'RtlCreateHeap', 'LdrLoadDll',
        'RtlMoveMemory', 'RtlCopyMemory', 'SetPropA', 'WaitForSingleObjectEx', 'WaitForMultipleObjects',
        'WaitForMultipleObjectsEx', 'KeInsertQueueApc', 'Wow64SetThreadContext', 'NtSuspendProcess', 'NtResumeProcess',
        'DuplicateToken', 'NtReadVirtualMemoryEx', 'CreateProcessInternal', 'EnumSystemLocalesA', 'UuidFromStringA',
        'DebugActiveProcessStop', 'CreateFileMappingA', 'DeleteFileA', 'GetModuleHandleA', 'GetProcAddress', 'LoadLibraryA',
        'LoadLibraryExA', 'LoadResource', 'SetEnvironmentVariableA', 'SetFileTime', 'Sleep', 'WaitForSingleObject',
        'SetFileAttributesA', 'SleepEx', 'NtDelayExecution', 'NtWaitForMultipleObjects', 'NtWaitForSingleObject',
        'CreateWindowExA', 'RegisterHotKey', 'timeSetEvent', 'IcmpSendEcho', 'WaitForSingleObjectEx',
        'WaitForMultipleObjects', 'WaitForMultipleObjectsEx', 'SetWaitableTimer', 'CreateTimerQueueTimer',
        'CreateWaitableTimer', 'SetWaitableTimer', 'SetTimer', 'Select', 'ImpersonateLoggedOnUser', 'SetThreadToken',
        'DuplicateToken', 'SizeOfResource', 'LockResource', 'CreateProcessInternal', 'TimeGetTime', 'CryptProtectData',
        'AttachThreadInput', 'CallNextHookEx', 'GetAsyncKeyState', 'GetClipboardData', 'GetDC', 'GetDCEx',
        'GetForegroundWindow', 'GetKeyboardState', 'GetKeyState', 'GetMessageA', 'GetRawInputData', 'GetWindowDC',
        'MapVirtualKeyA', 'MapVirtualKeyExA', 'PeekMessageA', 'PostMessageA', 'PostThreadMessageA', 'RegisterHotKey',
        'RegisterRawInputDevices', 'SendMessageA', 'SendMessageCallbackA', 'SendMessageTimeoutA', 'SendNotifyMessageA',
        'SetWindowsHookExA', 'SetWinEventHook', 'UnhookWindowsHookEx', 'BitBlt', 'StretchBlt', 'GetKeynameTextA',
        'WinExec', 'FtpPutFileA', 'HttpOpenRequestA', 'HttpSendRequestA', 'HttpSendRequestExA', 'InternetCloseHandle',
        'InternetOpenA', 'InternetOpenUrlA', 'InternetReadFile', 'InternetReadFileExA', 'InternetWriteFile',
        'URLDownloadToFile', 'URLDownloadToCacheFile', 'URLOpenBlockingStream', 'URLOpenStream', 'Accept', 'Bind',
        'Connect', 'Gethostbyname', 'Inet_addr', 'Recv', 'Send', 'WSAStartup', 'Gethostname', 'Socket', 'WSACleanup',
        'Listen', 'ShellExecuteA', 'ShellExecuteExA', 'DnsQuery_A', 'DnsQueryEx', 'WNetOpenEnumA', 'FindFirstUrlCacheEntryA',
        'FindNextUrlCacheEntryA', 'InternetConnectA', 'InternetSetOptionA', 'WSASocketA', 'Closesocket', 'WSAIoctl',
        'ioctlsocket', 'HttpAddRequestHeaders', 'GetLogicalProcessorInformation', 'GetLogicalProcessorInformationEx',
        'GetTickCount', 'OutputDebugStringA', 'CheckRemoteDebuggerPresent', 'Sleep', 'IsDebuggerPresent', 'NtQueryInformationProcess',
        'ExitWindowsEx', 'FindWindowA', 'FindWindowExA', 'GetForegroundWindow', 'GetTickCount64', 'QueryPerformanceFrequency',
        'QueryPerformanceCounter', 'CryptAcquireContextA', 'EncryptFileA', 'CryptEncrypt', 'CryptDecrypt', 'CryptCreateHash',
        'CryptHashData', 'CryptDeriveKey', 'CryptSetKeyParam', 'CryptGetHashParam', 'CryptDestroyKey', 'CryptGenRandom',
        'DecryptFileA', 'FlushEfsCache', 'CryptStringToBinary', 'CryptBinaryToString', 'CryptReleaseContext', 'CryptDestroyHash',
        'EnumSystemLocalesA', 'ConnectNamedPipe', 'CopyFileA', 'CreateFileA', 'CreateMutexA', 'CreateMutexExA',
        'DeviceIoControl', 'FindResourceA', 'FindResourceExA', 'GetModuleBaseNameA', 'GetModuleFileNameA', 'GetModuleFileNameExA',
        'GetTempPathA', 'MoveFileA', 'MoveFileExA', 'PeekNamedPipe', 'WriteFile', 'TerminateThread', 'CopyFile2',
        'CopyFileExA', 'CreateFile2', 'GetTempFileNameA', 'TerminateProcess', 'SetCurrentDirectory', 'FindClose', 'SetThreadPriority',
        'UnmapViewOfFile', 'ControlService', 'ControlServiceExA', 'CreateServiceA', 'DeleteService', 'OpenSCManagerA',
        'OpenServiceA', 'RegOpenKeyA', 'RegOpenKeyExA', 'StartServiceA', 'StartServiceCtrlDispatcherA', 'RegCreateKeyExA',
        'RegCreateKeyA', 'RegSetValueExA', 'RegSetKeyValueA', 'RegDeleteValueA', 'RegGetValueA', 'RegFlushKey',
        'RegGetKeySecurity', 'RegLoadKeyA', 'RegLoadMUIStringA', 'RegOpenCurrentUser', 'RegOpenKeyTransactedA',
        'RegOpenUserClassesRoot', 'RegOverridePredefKey', 'RegReplaceKeyA', 'RegRestoreKeyA', 'RegSaveKeyA', 'RegSaveKeyExA',
        'RegSetKeySecurity', 'RegUnLoadKeyA', 'RegConnectRegistryA', 'RegCopyTreeA', 'RegCreateKeyTransactedA', 'RegDeleteKeyA',
        'RegDeleteKeyExA', 'RegDeleteKeyTransactedA', 'RegDeleteKeyValueA', 'RegDeleteTreeA', 'RegCloseKey', 'NtClose',
        'NtCreateFile', 'NtDeleteKey', 'NtDeleteValueKey', 'NtMakeTemporaryObject', 'NtSetContextThread',
        'NtSetInformationProcess', 'NtSetInformationThread', 'NtSetSystemEnvironmentValueEx', 'NtSetValueKey',
        'NtShutdownSystem', 'NtTerminateProcess', 'NtTerminateThread', 'RtlSetProcessIsCritical', 'DrawTextExA',
        'GetDesktopWindow', 'SetClipboardData', 'SetWindowLongA', 'SetWindowLongPtrA', 'OpenClipboard', 'SetForegroundWindow',
        'BringWindowToTop', 'SetFocus', 'ShowWindow', 'NetShareSetInfo', 'NetShareAdd', 'NtQueryTimer', 'CreatePipe',
        'RegEnumKeyA', 'WNetOpenEnumA', 'WNetEnumResourceA', 'WNetAddConnection2A', 'CallWindowProcA', 'lstrcatA',
        'ImpersonateLoggedOnUser', 'SizeOfResource', 'LockResource', 'UuidFromStringA'
    )
    
    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Scanning file for malapi calls: $($_.FullName)"
        $fileContents = & $SysinternalsSuiteStringsPath $_.FullName
        $results = $fileContents | Where-Object { $malapiCalls -contains $_ }
        
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}

function Get-Artifacts {
    param ([string]$TargetDirectory = "C:\Path\To\Malware\Samples", [string]$ResultsDirectory = "C:\Path\To\Results")

    if (!(Test-Path -Path $TargetDirectory)) {
        Write-Host "Target directory not found: $TargetDirectory"
        return
    }

    if (!(Test-Path -Path $ResultsDirectory)) {
        New-Item -ItemType Directory -Path $ResultsDirectory | Out-Null
    }

    $artifacts = @{
        'url-results.txt' = Get-URLs
        'hex-encoded-urls.txt' = Get-HexEncodedURLs
        'base64.txt' = Get-Base64
        'defanged-urls.txt' = Get-DefangedURLs
        'registry-keys.txt' = Get-RegistryKeys
        'domain-results.txt' = Get-Domains
        'date-results.txt' = Get-Dates
        'hashes-results.txt' = Get-Hashes
        'ipv4-results.txt' = Get-IPv4
        'ipv6-results.txt' = Get-IPv6
        'email-results.txt' = Get-Emails
        'malapi-results.txt' = Get-MalapiCalls
    }

    foreach ($artifact in $artifacts.Keys) {
        $outputPath = Join-Path -Path $ResultsDirectory -ChildPath $artifact
        $function = $artifacts[$artifact]
        &$function -DirectoryPath $TargetDirectory -OutputPath $outputPath
    }

    Write-Host "Malware analysis completed. Results saved in $ResultsDirectory."
}

# . .\get-artifacts.ps1
# Get-Artifacts -TargetDirectory "C:\Malware\Samples" -ResultsDirectory "C:\Malware\AnalysisResults"