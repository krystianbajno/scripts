# . .\get-artifacts.ps1
# get-artifacts -TargetDirectory "C:\Malware\Samples" -ResultsDirectory "C:\Malware\AnalysisResults"

$SysinternalsSuiteStringsPath = "C:\Tools\SysinternalsSuite\strings.exe"

$SuspiciousPatterns = @(
    'HKEY_LOCAL_MACHINE\\Software\\Microsoft',
    'http[s]?://[a-zA-Z0-9\.-]+\.[a-zA-Z]{2,6}',
    'C:\\Windows\\System32'
)

function Get-URLs {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "url_output.txt"
    )

    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Checking file for URLs: $($_.FullName)"
        $results = & $SysinternalsSuiteStringsPath $_.FullName | 
                    Where-Object { $_ -match 'http[s]?://[a-zA-Z0-9\.-]+\.[a-zA-Z]{2,6}' }
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}


function Get-SuspiciousStrings {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "suspicious_strings.txt"
    )


    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Analyzing file: $($_.FullName)"
        $filePath = $_.FullName
        $stringsOutput = & $SysinternalsSuiteStringsPath $filePath

        foreach ($pattern in $SuspiciousPatterns) {
            $matches = $stringsOutput | Where-Object { $_ -match $pattern }
            if ($matches) {
                Add-Content -Path $OutputPath -Value "===== $filePath ====="
                Add-Content -Path $OutputPath -Value "Pattern: $pattern"
                $matches | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
            }
        }
    }
}


function Get-FileHashes {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "hash_output.txt"
    )

    if (!(Test-Path -Path $DirectoryPath)) {
        Write-Host "Directory not found: $DirectoryPath"
        return
    }

    Get-ChildItem -Path $DirectoryPath -Recurse -File | ForEach-Object {
        Write-Host "Hashing file: $($_.FullName)"
        $filePath = $_.FullName

        $hashMD5 = (Get-FileHash -Path $filePath -Algorithm MD5).Hash
        $hashSHA1 = (Get-FileHash -Path $filePath -Algorithm SHA1).Hash
        $hashSHA256 = (Get-FileHash -Path $filePath -Algorithm SHA256).Hash

        Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
        Add-Content -Path $OutputPath -Value "MD5: $hashMD5"
        Add-Content -Path $OutputPath -Value "SHA-1: $hashSHA1"
        Add-Content -Path $OutputPath -Value "SHA-256: $hashSHA256"
    }
}


function Get-IPAddresses {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "ip_output.txt"
    )
    
    if (!(Test-Path -Path $DirectoryPath)) {
        Write-Host "Directory not found: $DirectoryPath"
        return
    }

    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Processing file: $($_.FullName)"
        $results = & $SysinternalsSuiteStringsPath $_.FullName | 
                    Where-Object { $_ -match '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' }
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}

function Get-IPv4Addresses {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "ipv4_output.txt"
    )
    
    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Processing file for IPv4 addresses: $($_.FullName)"
        $results = & $SysinternalsSuiteStringsPath $_.FullName | 
                    Where-Object { $_ -match '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' }
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}

function Get-IPv6Addresses {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "ipv6_output.txt"
    )
    
    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Processing file for IPv6 addresses: $($_.FullName)"
        $results = & $SysinternalsSuiteStringsPath $_.FullName | 
                    Where-Object { $_ -match '([a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}' }
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}

function Get-DNSStrings {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "dns_output.txt"
    )
    
    if (!(Test-Path -Path $DirectoryPath)) {
        Write-Host "Directory not found: $DirectoryPath"
        return
    }

    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Processing file: $($_.FullName)"
        $results = & $SysinternalsSuiteStringsPath $_.FullName | 
                    Where-Object { $_ -match '^[a-zA-Z\-0-9\.]+\.[a-z]+$' }
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}

function Get-Emails {
    param (
        [string]$DirectoryPath = "C:\Path\To\Files",
        [string]$OutputPath = "email_output.txt"
    )
    
    Get-ChildItem -Path $DirectoryPath -Recurse | ForEach-Object {
        Write-Host "Processing file for email addresses: $($_.FullName)"
        $results = & $SysinternalsSuiteStringsPath $_.FullName | 
                    Where-Object { $_ -match '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}' }
        if ($results) {
            Add-Content -Path $OutputPath -Value "===== $($_.FullName) ====="
            $results | ForEach-Object { Add-Content -Path $OutputPath -Value $_ }
        }
    }
}

function Get-Artifacts {
    param (
        [string]$TargetDirectory = "C:\Path\To\Malware\Samples",
        [string]$ResultsDirectory = "C:\Path\To\Results"
    )

    if (!(Test-Path -Path $TargetDirectory)) {
        Write-Host "Target directory not found: $TargetDirectory"
        return
    }
    
    if (!(Test-Path -Path $ResultsDirectory)) {
        New-Item -ItemType Directory -Path $ResultsDirectory | Out-Null
    }

    $dnsOutputPath = Join-Path -Path $ResultsDirectory -ChildPath "dns_results.txt"
    $hashOutputPath = Join-Path -Path $ResultsDirectory -ChildPath "hashes_results.txt"
    $suspiciousOutputPath = Join-Path -Path $ResultsDirectory -ChildPath "suspicious_results.txt"
    $urlOutputPath = Join-Path -Path $ResultsDirectory -ChildPath "url_results.txt"
    $ipv4OutputPath = Join-Path -Path $ResultsDirectory -ChildPath "ipv4_results.txt"
    $ipv6OutputPath = Join-Path -Path $ResultsDirectory -ChildPath "ipv6_results.txt"
    $emailOutputPath = Join-Path -Path $ResultsDirectory -ChildPath "email_results.txt"

    Get-DNSStrings -DirectoryPath $TargetDirectory -OutputPath $dnsOutputPath
    Get-FileHashes -DirectoryPath $TargetDirectory -OutputPath $hashOutputPath
    Get-SuspiciousStrings -DirectoryPath $TargetDirectory -OutputPath $suspiciousOutputPath
    Get-URLs -DirectoryPath $TargetDirectory -OutputPath $urlOutputPath
    Get-Emails -DirectoryPath $TargetDirectory -OutputPath $emailOutputPath
    Get-IPv6Addresses -DirectoryPath $TargetDirectory -OutputPath $ipv6OutputPath
    Get-IPv4Addresses -DirectoryPath $TargetDirectory -OutputPath $ipv4OutputPath

    Write-Host "Malware analysis completed. Results saved in $ResultsDirectory."
}

# . .\get-artifacts.ps1
# get-artifacts -TargetDirectory "C:\Malware\Samples" -ResultsDirectory "C:\Malware\AnalysisResults"
