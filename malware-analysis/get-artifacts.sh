#!/bin/bash
# source get-artifacts.sh
# get-artifacts $tgtPath $resPath

get-urls() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-url_output.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Checking file for URLs: $file"
        results=$(strings "$file" | grep -E 'http[s]?://[a-zA-Z0-9\.-]+\.[a-zA-Z]{2,6}')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-hex-encoded-urls() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-hex_encoded_urls.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for hex-encoded URLs: $file"
        results=$(strings "$file" | grep -Eo '46[86]574(3a2f2f)?([0-9a-fA-F]{2})+')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-base64() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-base64_encoded_urls.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for Base64-encoded URLs: $file"
        results=$(strings "$file" | grep -Eo '([A-Za-z0-9+/]{10,}={0,2})')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-defanged-urls() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-defanged_urls.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for defanged URLs: $file"
        results=$(strings "$file" | grep -Eo '(hxxp|http|ftp)[s]?[:]//[^ ]*|\b[a-zA-Z0-9.-]+[[(dot)][.]a-zA-Z]{2,6}')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-registry-keys() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-registry_keys.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for registry keys: $file"
        results=$(strings "$file" | grep -Eo 'HKEY_[A-Z_]+\\[a-zA-Z0-9_\\]+')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-domains() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-domains.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for domain names: $file"
        results=$(strings "$file" | grep -Eo '\b[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}\b')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-dates() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-dates.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for dates: $file"
        results=$(strings "$file" | grep -Eo '\b([0-9]{4}-[0-9]{2}-[0-9]{2}|[0-9]{2}/[0-9]{2}/[0-9]{4})\b')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-hashes() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-hash_output.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for hashes: $file"
        hashMD5=$(md5sum "$file" | awk '{ print $1 }')
        hashSHA1=$(sha1sum "$file" | awk '{ print $1 }')
        hashSHA256=$(sha256sum "$file" | awk '{ print $1 }')

        echo "===== $file =====" >> "$OutputPath"
        echo "MD5: $hashMD5" >> "$OutputPath"
        echo "SHA-1: $hashSHA1" >> "$OutputPath"
        echo "SHA-256: $hashSHA256" >> "$OutputPath"
    done
}

get-ipv4() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-ipv4_output.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for IPv4 addresses: $file"
        results=$(strings "$file" | grep -E '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-ipv6() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-ipv6_output.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for IPv6 addresses: $file"
        results=$(strings "$file" | grep -E '([a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-emails() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-email_output.txt}"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Processing file for email addresses: $file"
        results=$(strings "$file" | grep -E '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}')
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-malapi() {
    local DirectoryPath="${1:-/path/to/files}"
    local OutputPath="${2:-malapi_results.txt}"

    local malapi_calls="CreateToolhelp32Snapshot EnumDeviceDrivers EnumProcesses EnumProcessModules EnumProcessModulesEx FindFirstFileA FindNextFileA GetLogicalProcessorInformation GetLogicalProcessorInformationEx GetModuleBaseNameA GetSystemDefaultLangId GetVersionExA GetWindowsDirectoryA IsWoW64Process Module32First Module32Next Process32First Process32Next ReadProcessMemory Thread32First Thread32Next GetSystemDirectoryA GetSystemTime ReadFile GetComputerNameA VirtualQueryEx GetProcessIdOfThread GetProcessId GetCurrentThread GetCurrentThreadId GetThreadId GetThreadInformation GetCurrentProcess GetCurrentProcessId SearchPathA GetFileTime GetFileAttributesA LookupPrivilegeValueA LookupAccountNameA GetCurrentHwProfileA GetUserNameA RegEnumKeyExA RegEnumValueA RegQueryInfoKeyA RegQueryMultipleValuesA RegQueryValueExA NtQueryDirectoryFile NtQueryInformationProcess NtQuerySystemEnvironmentValueEx EnumDesktopWindows EnumWindows NetShareEnum NetShareGetInfo NetShareCheck GetAdaptersInfo PathFileExistsA GetNativeSystemInfo RtlGetVersion GetIpNetTable GetLogicalDrives GetDriveTypeA RegEnumKeyA WNetEnumResourceA WNetCloseEnum FindFirstUrlCacheEntryA FindNextUrlCacheEntryA WNetAddConnection2A WNetAddConnectionA EnumResourceTypesA EnumResourceTypesExA GetSystemTimeAsFileTime GetThreadLocale EnumSystemLocalesA CreateFileMappingA CreateProcessA CreateRemoteThread CreateRemoteThreadEx GetModuleHandleA GetProcAddress GetThreadContext HeapCreate LoadLibraryA LoadLibraryExA LocalAlloc MapViewOfFile MapViewOfFile2 MapViewOfFile3 MapViewOfFileEx OpenThread Process32First Process32Next QueueUserAPC ReadProcessMemory ResumeThread SetProcessDEPPolicy SetThreadContext SuspendThread Thread32First Thread32Next Toolhelp32ReadProcessMemory VirtualAlloc VirtualAllocEx VirtualProtect VirtualProtectEx WriteProcessMemory VirtualAllocExNuma VirtualAlloc2 VirtualAlloc2FromApp VirtualAllocFromApp VirtualProtectFromApp CreateThread WaitForSingleObject OpenProcess OpenFileMappingA GetProcessHeap GetProcessHeaps HeapAlloc HeapReAlloc GlobalAlloc AdjustTokenPrivileges CreateProcessAsUserA OpenProcessToken CreateProcessWithTokenW NtAdjustPrivilegesToken NtAllocateVirtualMemory NtContinue NtCreateProcess NtCreateProcessEx NtCreateSection NtCreateThread NtCreateThreadEx NtCreateUserProcess NtDuplicateObject NtMapViewOfSection NtOpenProcess NtOpenThread NtProtectVirtualMemory NtQueueApcThread NtQueueApcThreadEx NtQueueApcThreadEx2 NtReadVirtualMemory NtResumeThread NtUnmapViewOfSection NtWaitForMultipleObjects NtWaitForSingleObject NtWriteVirtualMemory RtlCreateHeap LdrLoadDll RtlMoveMemory RtlCopyMemory SetPropA WaitForSingleObjectEx WaitForMultipleObjects WaitForMultipleObjectsEx KeInsertQueueApc Wow64SetThreadContext NtSuspendProcess NtResumeProcess DuplicateToken NtReadVirtualMemoryEx CreateProcessInternal EnumSystemLocalesA UuidFromStringA DebugActiveProcessStop CreateFileMappingA DeleteFileA GetModuleHandleA GetProcAddress LoadLibraryA LoadLibraryExA LoadResource SetEnvironmentVariableA SetFileTime Sleep WaitForSingleObject SetFileAttributesA SleepEx NtDelayExecution NtWaitForMultipleObjects NtWaitForSingleObject CreateWindowExA RegisterHotKey timeSetEvent IcmpSendEcho WaitForSingleObjectEx WaitForMultipleObjects WaitForMultipleObjectsEx SetWaitableTimer CreateTimerQueueTimer CreateWaitableTimer SetWaitableTimer SetTimer Select ImpersonateLoggedOnUser SetThreadToken DuplicateToken SizeOfResource LockResource CreateProcessInternal TimeGetTime EnumSystemLocalesA UuidFromStringA CryptProtectData AttachThreadInput CallNextHookEx GetAsyncKeyState GetClipboardData GetDC GetDCEx GetForegroundWindow GetKeyboardState GetKeyState GetMessageA GetRawInputData GetWindowDC MapVirtualKeyA MapVirtualKeyExA PeekMessageA PostMessageA PostThreadMessageA RegisterHotKey RegisterRawInputDevices SendMessageA SendMessageCallbackA SendMessageTimeoutA SendNotifyMessageA SetWindowsHookExA SetWinEventHook UnhookWindowsHookEx BitBlt StretchBlt GetKeynameTextA WinExec FtpPutFileA HttpOpenRequestA HttpSendRequestA HttpSendRequestExA InternetCloseHandle InternetOpenA InternetOpenUrlA InternetReadFile InternetReadFileExA InternetWriteFile URLDownloadToFile URLDownloadToCacheFile URLOpenBlockingStream URLOpenStream Accept Bind Connect Gethostbyname Inet_addr Recv Send WSAStartup Gethostname Socket WSACleanup Listen ShellExecuteA ShellExecuteExA DnsQuery_A DnsQueryEx WNetOpenEnumA FindFirstUrlCacheEntryA FindNextUrlCacheEntryA InternetConnectA InternetSetOptionA WSASocketA Closesocket WSAIoctl ioctlsocket HttpAddRequestHeaders CreateToolhelp32Snapshot GetLogicalProcessorInformation GetLogicalProcessorInformationEx GetTickCount OutputDebugStringA CheckRemoteDebuggerPresent Sleep GetSystemTime GetComputerNameA SleepEx IsDebuggerPresent GetUserNameA NtQueryInformationProcess ExitWindowsEx FindWindowA FindWindowExA GetForegroundWindow GetTickCount64 QueryPerformanceFrequency QueryPerformanceCounter GetNativeSystemInfo RtlGetVersion GetSystemTimeAsFileTime CountClipboardFormats CryptAcquireContextA EncryptFileA CryptEncrypt CryptDecrypt CryptCreateHash CryptHashData CryptDeriveKey CryptSetKeyParam CryptGetHashParam CryptSetKeyParam CryptDestroyKey CryptGenRandom DecryptFileA FlushEfsCache GetLogicalDrives GetDriveTypeA CryptStringToBinary CryptBinaryToString CryptReleaseContext CryptDestroyHash EnumSystemLocalesA CryptProtectData ConnectNamedPipe CopyFileA CreateFileA CreateMutexA CreateMutexExA DeviceIoControl FindResourceA FindResourceExA GetModuleBaseNameA GetModuleFileNameA GetModuleFileNameExA GetTempPathA IsWoW64Process MoveFileA MoveFileExA PeekNamedPipe WriteFile TerminateThread CopyFile2 CopyFileExA CreateFile2 GetTempFileNameA TerminateProcess SetCurrentDirectory FindClose SetThreadPriority UnmapViewOfFile ControlService ControlServiceExA CreateServiceA DeleteService OpenSCManagerA OpenServiceA RegOpenKeyA RegOpenKeyExA StartServiceA StartServiceCtrlDispatcherA RegCreateKeyExA RegCreateKeyA RegSetValueExA RegSetKeyValueA RegDeleteValueA RegOpenKeyExA RegEnumKeyExA RegEnumValueA RegGetValueA RegFlushKey RegGetKeySecurity RegLoadKeyA RegLoadMUIStringA RegOpenCurrentUser RegOpenKeyTransactedA RegOpenUserClassesRoot RegOverridePredefKey RegReplaceKeyA RegRestoreKeyA RegSaveKeyA RegSaveKeyExA RegSetKeySecurity RegUnLoadKeyA RegConnectRegistryA RegCopyTreeA RegCreateKeyTransactedA RegDeleteKeyA RegDeleteKeyExA RegDeleteKeyTransactedA RegDeleteKeyValueA RegDeleteTreeA RegDeleteValueA RegCloseKey NtClose NtCreateFile NtDeleteKey NtDeleteValueKey NtMakeTemporaryObject NtSetContextThread NtSetInformationProcess NtSetInformationThread NtSetSystemEnvironmentValueEx NtSetValueKey NtShutdownSystem NtTerminateProcess NtTerminateThread RtlSetProcessIsCritical DrawTextExA GetDesktopWindow SetClipboardData SetWindowLongA SetWindowLongPtrA OpenClipboard SetForegroundWindow BringWindowToTop SetFocus ShowWindow NetShareSetInfo NetShareAdd NtQueryTimer GetIpNetTable GetLogicalDrives GetDriveTypeA CreatePipe RegEnumKeyA WNetOpenEnumA WNetEnumResourceA WNetAddConnection2A CallWindowProcA NtResumeProcess lstrcatA ImpersonateLoggedOnUser SetThreadToken SizeOfResource LockResource UuidFromStringA"

    find "$DirectoryPath" -type f | while read -r file; do
        echo "Scanning file for malapi calls: $file"
        results=$(strings "$file" | grep -Eo "$(echo $malapi_calls | tr ' ' '|')")
        if [[ -n "$results" ]]; then
            echo "===== $file =====" >> "$OutputPath"
            echo "$results" >> "$OutputPath"
        fi
    done
}

get-artifacts() {
    local TargetDirectory="${1:-/path/to/malware/samples}"
    local ResultsDirectory="${2:-/path/to/results}"

    if [[ ! -d "$TargetDirectory" ]]; then
        echo "Target directory not found: $TargetDirectory"
        return 1
    fi

    mkdir -p "$ResultsDirectory"

    get-urls "$TargetDirectory" "$ResultsDirectory/url-results.txt"
    get-hex-encoded-urls "$TargetDirectory" "$ResultsDirectory/hex-encoded-urls.txt"
    get-base64 "$TargetDirectory" "$ResultsDirectory/base64-results.txt"
    get-defanged-urls "$TargetDirectory" "$ResultsDirectory/defanged-urls.txt"
    get-registry-keys "$TargetDirectory" "$ResultsDirectory/registry-keys.txt"
    get-domains "$TargetDirectory" "$ResultsDirectory/domain-results.txt"
    get-dates "$TargetDirectory" "$ResultsDirectory/date-results.txt"
    get-hashes "$TargetDirectory" "$ResultsDirectory/hashes-results.txt"
    get-ipv4 "$TargetDirectory" "$ResultsDirectory/ipv4-results.txt"
    get-ipv6 "$TargetDirectory" "$ResultsDirectory/ipv6-results.txt"
    get-malapi "$TargetDirectory" "$ResultsDirectory/malapi-results.txt"
    get-emails "$TargetDirectory" "$ResultsDirectory/email-results.txt"

    echo "Malware analysis completed. Results saved in $ResultsDirectory."
}

# source get-artifacts.sh
# get-artifacts $tgtPath $resPath